#[Name(test)]

type string
{
  head : char&
}

#[Prototype]
fn Print(str : string)

/*
template operator []<type T, uint N>(T[N] array, uint index) -> T&
{
  StaticAssert(index < N)
  AIR("la t1, #array")
  AIR("add t1, #index")
  return AIR("t1")
}
*/

#[Entry]
fn Main() -> int
{
  a : mut string[3u]
  a[0u] = "String1"
  a[1u] = "String2"
  a[2u] = "String3"

  Print(a[0u])
  return 0
}

// ORRRR

/*
operator []<N : uint>(arr : mut uint[N], index : uint) -> mut uint&
{
  // TODO: how to represent that we want to do raw pointer arithmetic
  #[AllowRawPointers]
  return Cast<mut uint&>(arr) + index
}

#[Entry]
fn Main() -> int
{
  arr : mut uint[5u]
  arr[0u] = 7u
  return 0
}
*/
